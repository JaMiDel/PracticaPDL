package Analizador;

import java.util.HashMap;
import java.util.Map;

import Objetos.Tipo;
import Objetos.Writter;


public class TablaSimbolosControl {

	private Integer currentTableID;
	private Map<Integer, Integer> bloqueTS;
	private Map<Integer, TablaSimbolos> listaTS;
	private TablaSimbolos ultimaTS;
	
	private Writter tsWriter;
		
	public TablaSimbolosControl(){
		TablaSimbolos.NTABLES = 0;
		EntradaTS.ENTRADA_ID = 0;
		
		this.bloqueTS = new HashMap<Integer, Integer>();
		this.listaTS = new HashMap<Integer, TablaSimbolos>();
		
		this.currentTableID = -1;
		
		this.tsWriter = new Writter("C:\\Users\\RAYS\\Documents\\Salidas\\tabla.txt");
	}
	
	public void createTable(){
		TablaSimbolos ts = new TablaSimbolos();
		this.listaTS.put(ts.getID(), ts);
		this.bloqueTS.put(ts.getID(), this.currentTableID);
		this.currentTableID = ts.getID();

	}
	
	public void removeTable(){
		this.tsWriter.write(this.getCurrenTable().toString());
		this.listaTS.remove(this.currentTableID);
		this.currentTableID = this.bloqueTS.get(this.currentTableID);
	}
	
	public TablaSimbolos getCurrenTable(){
		return this.listaTS.get(this.currentTableID);
	}
	
	public EntradaTS buscarEntradaPorID(Integer entrada_id){
		EntradaTS entrada = null;
		
		Integer tabla_id = this.currentTableID;
		this.ultimaTS = this.listaTS.get(tabla_id);
		entrada = this.ultimaTS.buscarPorID(entrada_id);
		while (entrada == null){
			tabla_id = this.bloqueTS.get(tabla_id);
			if (tabla_id == null){
				break;
			}
			this.ultimaTS = this.listaTS.get(tabla_id);
			if (this.ultimaTS == null) {
				break;
			}
			entrada = this.ultimaTS.buscarPorID(entrada_id);
		}

		return entrada;
	}
	
	public EntradaTS buscarEntradaPorLexema(String lexema){
		EntradaTS entrada = null;
		Integer tabla_0=this.currentTableID;
		Integer tabla_id = this.currentTableID;									// Obtenemos el identificador de la tabla actual
		this.ultimaTS = this.listaTS.get(tabla_id);								// Obtenemos la tabla(objeto de tipo TablaSimbolos)
		entrada = this.ultimaTS.buscarPorLexema(lexema);						// Buscamos entrada dentro de la tabla de simbolos por lexema.
		while (entrada == null){												// Sino encuentra entrada, buscamos en el padre
			tabla_id = this.bloqueTS.get(tabla_id);								// Obtenemos el identificador del padre de la tabla actual.
			if (tabla_id == null){												// Si identificador de tabla es null, no hay mas tablas.
				break;															// Salimos del bucle
			}
			this.ultimaTS = this.listaTS.get(tabla_id);							// Obtenemos la tabla(objeto de tipo TablaSimbolos)
			
			if (this.ultimaTS == null) {
				break;
			}
			entrada = this.ultimaTS.buscarPorLexema(lexema);					// Buscamos entrada dentro de la tabla de simbolos por lexema.
		}
		
		if(entrada != null && entrada.getTabla() == 0 && entrada.getTabla()!=tabla_0.intValue() &&entrada.getDesp().intValue()>-1){
			entrada=null;
		}
		return entrada;
	}
	
	public EntradaTS insertarEntrada(String lexema){
		TablaSimbolos tabla = this.listaTS.get(this.currentTableID);
	
		return tabla.insertar(lexema,tabla.getID());
	}
	
	public void insertarTipoTS(Integer entrada_id, Object tipo, Integer tamanio){
		EntradaTS entrada = this.buscarEntradaPorID(entrada_id);
		if (entrada != null) {
			entrada.setTipo(tipo);
			if (tamanio != null) {
				entrada.setDesp(this.ultimaTS.getUltimoDesp());
				this.ultimaTS.setUltimoDesp(this.ultimaTS.getUltimoDesp() + tamanio);
			}	
		}
	}

	public Object buscarTipoTS(Integer entrada_id) {
		Object tipo = "";
		EntradaTS entrada = this.buscarEntradaPorID(entrada_id);
		if (entrada != null) {
			tipo = entrada.getTipo();
		}
		return tipo;
	}
	
}

class TablaSimbolos  {
	protected static Integer NTABLES = 0;
	
	private Integer id;
	private Map<String, Integer> indice;
	private Map<Integer, EntradaTS> entradas;
	private Integer ultimo_desp;										// Representa el desplazamiento de cada tabla.

	public TablaSimbolos(){
		this.setID(TablaSimbolos.NTABLES);
		this.indice = new HashMap<String, Integer>();
		this.entradas = new HashMap<Integer, EntradaTS>();
		this.ultimo_desp = 0;
		
		TablaSimbolos.NTABLES++;
	}
	
	public Integer getID() {
		return id;
	}

	public void setID(Integer id) {
		this.id = id;
	}
	
	public Integer getUltimoDesp() {
		return ultimo_desp;
	}

	public void setUltimoDesp(Integer ultimo_desp) {
		this.ultimo_desp = ultimo_desp;
	}
	
	public EntradaTS insertar(String lexema,int t){
		EntradaTS entrada = new EntradaTS(lexema);
		entrada.setTabla(t);
		this.indice.put(lexema, entrada.getId());
		this.entradas.put(entrada.getId(), entrada);
		
		return entrada;
	}
	
	public EntradaTS buscarPorID(Integer id){
		return this.entradas.get(id);
	}
	
	public EntradaTS buscarPorLexema(String lexema){
		Integer idEntrada = this.indice.get(lexema);
		if(idEntrada != null){
			return this.entradas.get(idEntrada);
		}
		return null;
	}
	
	@Override
	public String toString(){
		String table_string = String.format("CONTENIDO DE LA TABLA # %d:%n", this.id);
		for (EntradaTS entrada : entradas.values()) {
			table_string += String.format("%s%n", entrada);
		}
		return table_string;
	}
	
}

class EntradaTS {
	protected static Integer ENTRADA_ID = 0;
	
	private Integer id;
	private String lexema;
	private Object tipo;
	private Integer desp;
	private Integer tabla;
	
	public EntradaTS(String lexema){
		this.id = EntradaTS.ENTRADA_ID;
		this.lexema = lexema;
		this.tipo = Tipo.UNDEFINED;
		this.desp = -1;
		this.tabla = -1;
		
		EntradaTS.ENTRADA_ID += 1;
	}
	
	public Integer getTabla() {
		return tabla;
	}

	public void setTabla(Integer tabla) {
		this.tabla = tabla;
	}

	public EntradaTS(Integer id, String lexema){
		this.id = id;
		this.lexema = lexema;
		this.tipo = Tipo.UNDEFINED;
		this.desp = -1;
	}
	
	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getLexema() {
		return lexema;
	}

	public void setLexema(String lexema) {
		this.lexema = lexema;
	}

	public Object getTipo() {
		return tipo;
	}

	public void setTipo(Object tipo) {
		this.tipo = tipo;
	}

	public Integer getDesp() {
		Integer ret;
		if (this.desp == null){
			ret=null;
		}
		else{
			ret = desp;
		}
		return ret;
	}
	
	public void setDesp(Integer desp) {
		this.desp = desp;
	}
	
	
	
	@Override
	public String toString(){
		if (this.desp >= 0) {
			return String.format("* LEXEMA: '%s'%n   ATRIBUTOS:%n   + tipo: '%s'%n   + desplazamiento: %d", this.lexema, this.tipo, this.desp); 
		} else {
			return String.format("* LEXEMA: '%s'%n   ATRIBUTOS:%n   + tipo: '%s'", this.lexema, this.tipo);
		}
	}
}
