package Analizador;
import java.util.HashMap;
import java.util.Map;

import Objetos.Reader;
import Objetos.Token;
import Objetos.Writter;

public class AnalizadorLexico{
    private char currentChar;
    private String currentString;
    private int currentNumber;
    private Reader fileReader;
    private Writter tokenWritter;
    private int tamPalRes = 11;
    private ErrorControl errControl;
    //private int tamSimb = 5;
    private Map<String, Integer> PalRes;
    private Map<String, Integer> Simbolos;
	private TablaSimbolosControl stHandler;
   
    public AnalizadorLexico(Reader file_reader, Writter token_Writter, TablaSimbolosControl stHandler, ErrorControl errControl) {
        this.initializeTables();
        this.setFileReader(file_reader);
        this.tokenWritter = token_Writter;
        this.stHandler=stHandler;
        this.errControl=errControl;
        this.readChar();
    }

    public Token getToken() {
    	
        Token token = new Token("NULL");
        this.currentString = "";
        this.currentNumber = 0;
        if (!this.isDel(this.currentChar)) {
            if (this.currentChar == '/') {
                this.readChar();
                if (this.currentChar == '/') {
                 this.readChar();
                    while (this.currentChar != '\n') {
                        this.readChar();
                    }
                    return this.getToken();
                }
                if(this.currentChar == '*'){
                	while(this.currentChar != '/'){
                		while(this.currentChar != '*') {
                			this.readChar();
                		}
                		this.readChar();
					}
                	this.readChar();
                	return this.getToken();
                }
               
                this.errControl.write(String.format("Linea %d: Analizador Lexico - Caracter(es) \"%s\" no esperado(s)", getFileReader().getCurrentLine(),this.currentChar));
            }
            else if (this.isNo(this.currentChar)) {
                this.calculateValue();
                this.readChar();
                while (this.isNo(this.currentChar) && this.currentNumber <= 32767) {
                    this.calculateValue();
                    this.readChar();
                }
                if (this.currentNumber <= 32767) {
                    return this.generate_token("NUM", this.currentNumber);
                }
                this.errControl.write(String.format("Linea %d: Analizador Lexico - NUM ( %d ) fuera de rango", getFileReader().getCurrentLine(),this.currentNumber));
            }
            else if (this.currentChar == '\"') {
                this.readChar();
                while (this.currentChar != '\"' && this.currentChar != '\n' && this.currentChar != '\0') {
                    this.concValue();
                    this.readChar();
                }
                if (this.currentChar == '\"') {
                    this.readChar();
                    return this.generate_token("CAD", this.currentString);
                }
                this.errControl.write(String.format("Linea %d: Analizador Lexico - CAD no valida", getFileReader().getCurrentLine()));
            }
            else if (this.isLet(this.currentChar)) {
                this.concValue();
                this.readChar();
                while (this.isLet(this.currentChar) || this.isNo(this.currentChar) || this.currentChar == '_') {
                    this.concValue();
                    this.readChar();
                }
                Integer idPalRes = this.PalRes.get(this.currentString);
                if (idPalRes != null) {
                    return this.generate_token("PAL_RES", idPalRes);
                }else{
                	EntradaTS entrada = this.stHandler.buscarEntradaPorLexema(this.currentString);
                	
    				if (entrada == null){
    					entrada = this.stHandler.insertarEntrada(this.currentString);
    				
    				}
    				
                	return this.generate_token("ID", entrada.getId());
                }
                
            }
            else {
            	if (this.currentChar == '>') {
                    this.concValue();
                    this.readChar();
                    return this.generate_token("OPERADOR", this.Simbolos.get(this.currentString));
                } 
                if (this.currentChar == '=') {
                    this.concValue();
                    this.readChar();
                    return this.generate_token("OPERADOR", this.Simbolos.get(this.currentString));
                }
                if (this.currentChar == '+') {
                    this.concValue();
                    this.readChar();
                    return this.generate_token("OPERADOR", this.Simbolos.get(this.currentString));
                }
                if (this.currentChar == '|') {
                    this.concValue();
                    this.readChar();
                    if (this.currentChar == '=') {
                        this.concValue();
                        this.readChar();
                        return this.generate_token("OPERADOR", this.Simbolos.get(this.currentString));             
                    }
                    this.errControl.write(String.format("Linea %d: Analizador Lexico - Formato del operador OR_asignacion incorrecto", getFileReader().getCurrentLine()));
                }
                
                if (this.currentChar == '&') {
                    this.concValue();
                    this.readChar();
                    if (this.currentChar == '&') {
                        this.concValue();
                        this.readChar();
                        return this.generate_token("OPERADOR", this.Simbolos.get(this.currentString));
                    }
                    this.errControl.write(String.format("Linea %d: Analizador Lexico - Formato del operador AND incorrecto", getFileReader().getCurrentLine()));

                }
                else {

                    if (this.isSymbol(this.currentChar)) {
                        this.concValue();
                        this.readChar();
                        return this.generate_token("CARACTER", this.currentString);
                    }
                    this.errControl.write(String.format("Linea %d: Analizador Lexico - Caracter ( %s ) no soportado", getFileReader().getCurrentLine(),this.currentChar));
                    this.readChar();
                }
            }
            return token;
        }
        if (this.currentChar == '\t'){
        	 this.readChar();
        } 
        if (this.currentChar == '\n') {
            this.readChar();
            return this.generate_token("EOL", null);
        }
        if (this.currentChar == '\0') {
            token = this.generate_token("EOF", null);
            this.getFileReader().close();
            return token;
        }
        this.readChar();
        return this.getToken();

       
    }

    private void readChar() {
        this.currentChar = this.getFileReader().read();
    }   

    private void concValue() {
        this.currentString = String.valueOf(this.currentString) + this.currentChar;
    }

    private void calculateValue() {
        this.concValue();
        this.currentNumber = this.currentNumber * 10 + (this.currentChar - '0');
    }

    private Token generate_token(String id, Object attr) {
        Token token = new Token(id, attr);
        if (id.equals("CAD")) { 	
            token.setValue(this.currentString);
        }
        if(id.equals("NUM")){
        	token.setValue(this.currentNumber);
        }
        this.tokenWritter.write(token.toString());
        return token;
    } 

    private boolean isDel(char c) {
    	if(c == ' ' || c == '\r' || c == '\n' || c == '\0'){
    		return true;
    	}
        return false;
    }

    private boolean isNo(char c) {
    	if(c >= '0' && c <= '9'){
    		return true;
    	}
        return false;
    }

    private boolean isLet(char c) {
    	if((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')){
    		return true;
    	}
        return false;
    }

    private boolean isSymbol(char c) {
    	if(c == '(' || c == ')' || c == ',' || c == '.' || c == '{' || c == '}' || c == ';'){
    		return true;
    	}
        return false;
    }

	private boolean buscarLexema(Map<String, Integer> palRes2, String id) {
		boolean result = false;
		if (palRes2.containsKey(id)) {
			result = true;
		}
		return result;
	}
	
    
    private void initializeTables() {
        this.PalRes = new HashMap<String, Integer>();
        this.PalRes.put("var", 0);
        this.PalRes.put("int", 1);
        this.PalRes.put("chars", 2);
        this.PalRes.put("bool", 3);
        this.PalRes.put("for", 4);
        this.PalRes.put("function", 5);
        this.PalRes.put("return", 6);
        this.PalRes.put("true", 7);     
        this.PalRes.put("false", 8);
        this.PalRes.put("write", 9);
        this.PalRes.put("prompt", 10);
        this.Simbolos = new HashMap<String, Integer>();
        this.Simbolos.put("+", 0);
        this.Simbolos.put("=", 1);
        this.Simbolos.put(">", 3);
        this.Simbolos.put("|=", 2);
        this.Simbolos.put("&&", 4);
    }

	public Reader getFileReader() {
		return fileReader;
	}

	public void setFileReader(Reader fileReader) {
		this.fileReader = fileReader;
	}
	
	public void write(String s){
		this.tokenWritter.write(s);
	}
}
